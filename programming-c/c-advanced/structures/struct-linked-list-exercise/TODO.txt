Exercise: Structures - Linked List (Principles)
-------------------------------------------------------------------------------

Implementieren Sie die folgenden Funktionen die "node_t" Structures am Heap 
verarbeiten:

A) node_t *list_append(node_t *first_ptr, const int value)
Erzeugt für den Wert "value" ein neues "node_t" Objekt am Heap und fügt das 
"node_t" Objekt am Ende der Liste ein.
Beachten Sie den Spezialfall einer leeren Liste: das erzeugte "node_t" Objekt 
ist dann das einzige Objekt in der Liste. 
Geben Sie den Pointer auf das erste Objekt in der Liste zurück.

B) int list_size(node_t *first_ptr)
Es wird die Anzahl der "node_t" Objekte in der Liste gezählt.
Die Summe wird als Ergebnis zurück gegeben.

C) int list_get(node_t *first_ptr, const int index)
Es wird der Wert des "node_t" Objekts an der Stelle indes (beginnend mit 0)
gelesen und als ergebnis zurück gegeben.
Es kann davon ausgegangen werden, dass der "index" richtig vorgegeben wird 
(0 <= index < size ).

D) void list_update(node_t *first_ptr, const int index, const int value)
Der Wert des "node_t" Objekts mit dem gegebenen "index" soll mit dem 
angegebenen Wert überschrieben werden.
Es kann davon ausgegangen werden, dass der "index" richtig vorgegeben wird 
(0 <= index < size ).

E) void list_delete(node_t *first_ptr)
Es werden alle "node_t" Objekte am Heap frei gegeben.

Das Ergebnis wird in der "main()" Funktion via assert Statements überprüft.